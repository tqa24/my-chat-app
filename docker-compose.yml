services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # Expose your Go application's port
      - "6060:6060" # Expose expvar port (for Prometheus to scrape)
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - APP_PORT=${APP_PORT}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - JWT_SECRET=${JWT_SECRET}
      - GIN_MODE=release # Set Gin to production mode
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - uploads:/root/uploads  # Mount the uploads volume (for persistence *within* the container)
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'  # Limit to 30% of a CPU core
          memory: 256M # Limit to 256MB of RAM
        reservations:
          memory: 128M # Reserve 128MB of RAM
    networks:
      - chat-network

  nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - app
    deploy:
        resources:
            limits:
              cpus: '0.2'
              memory: 100M
            reservations:
                memory: 50M
    networks:
        - chat-network
    restart: unless-stopped

  postgres:
    image: postgres:17-alpine # Use a specific, supported version. Alpine is smaller.
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist PostgreSQL data
    restart: unless-stopped
    networks:
      - chat-network
    # Add resource limits (CRITICAL for your 1GB VPS)
    deploy:
      resources:
        limits:
          cpus: '0.3'  # Limit to 30% of a CPU core
          memory: 256M # Limit to 256MB of RAM
        reservations:
            memory: 128M # Reserve 128MB of RAM

  rabbitmq:
    image: rabbitmq:4-management-alpine # Use the management plugin version (for the web UI)
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER} # Add these to your .env
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port (access this in your browser)
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Persist RabbitMQ data
    restart: unless-stopped
    networks:
      - chat-network
    # Add resource limits (CRITICAL)
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
            memory: 100M

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d' #  Keep data for only 15 day (adjust as needed, but keep it short!)
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"  # Prometheus UI
    restart: unless-stopped
    depends_on:
      - app
      - rabbitmq_exporter
      - postgres_exporter
    networks:
      - chat-network
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 100M

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"  # Grafana UI
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER} # Add to .env
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    restart: unless-stopped
    networks:
      - chat-network
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
    depends_on:
      - prometheus

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - chat-network
    restart: unless-stopped
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 100M

  rabbitmq_exporter:
    image: kbudde/rabbitmq-exporter
    ports:
      - "9419:9419"
    depends_on:
      - rabbitmq
    restart: unless-stopped
    environment:
      RABBIT_URL: "http://rabbitmq:15672"
      RABBIT_USER: ${RABBITMQ_USER}
      RABBIT_PASSWORD: ${RABBITMQ_PASSWORD}
    networks:
      - chat-network
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 100M

volumes:
  postgres_data:
  rabbitmq_data:
  uploads:  # Named volume for the uploads directory
  prometheus_data:
  grafana_data:

networks:
  chat-network:
    driver: bridge